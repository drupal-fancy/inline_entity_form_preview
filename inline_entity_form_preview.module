<?php

/**
 * @file
 * Contains inline_entity_form_preview.module
 */

/**
 * Implements inline_entity_form_table_fields();
 */
function inline_entity_form_preview_inline_entity_form_table_fields_alter(&$fields, $context) {
  $entity_type = $context['parent_entity_type'];
  $bundle = $context['parent_bundle'];

  /** @var $form_display \Drupal\Core\Entity\EntityFormDisplay **/
  $form_display = entity_get_form_display($entity_type, $bundle, 'default');
  $third_party_settings = $form_display->getComponent($context['field_name'])['third_party_settings'];

  if (!empty($third_party_settings['inline_entity_form_preview']['preview']['enable'])) {
    $fields['preview'] = [
      'type' => 'callback',
      'callback' => 'inline_entity_form_preview_ief_preview_column',
      'callback_arguments' => [$context],
      'label' => t('Preview'),
      'weight' => 50,
    ];
  }
}

/**
 * Callback for preview column.
 */
function inline_entity_form_preview_ief_preview_column($entity, $variables, $context) {
  $entity_type = $context['parent_entity_type'];
  $bundle = $context['parent_bundle'];

  /** @var $form_display \Drupal\Core\Entity\EntityFormDisplay **/
  $form_display = entity_get_form_display($entity_type, $bundle, 'default');
  $third_party_settings = $form_display->getComponent($context['field_name'])['third_party_settings'];
  if (!empty($third_party_settings['inline_entity_form_preview']['preview']['enable'])) {
    $settings = $third_party_settings['inline_entity_form_preview']['preview'];
  }
  else {
    return '';
  }

  $view_mode = $settings['view_mode'];

  // Set fallback view mode if view mode is not enabled.
  $enabled = inline_entity_form_preview_get_enabled_view_modes($entity_type, $bundle);
  if (!in_array($view_mode, $enabled)) {
    if (!empty($settings['fallback_view_mode'])) {
      $view_mode = $settings['fallback_view_mode'];
    }
    else {
      // Render no preview if no fallback view mode is set.
      return '';
    }
  }

  $entity_view = entity_view($entity, $view_mode);

  return $entity_view;
}

/**
 * Implements hook_field_widget_third_party_settings_form().
 */
function inline_entity_form_preview_field_widget_third_party_settings_form(\Drupal\Core\Field\WidgetInterface $plugin, \Drupal\Core\Field\FieldDefinitionInterface $field_definition, $form_mode, $form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $element = [];

  if ($plugin->getPluginId() == 'inline_entity_form_multiple') {
    $settings = $plugin->getThirdPartySetting('inline_entity_form_preview', 'preview');
    $view_mode_options = inline_entity_form_preview_get_view_mode_options($field_definition->getSetting('target_type'));

    // Set teaser as default preview view mode
    if (empty($settings['view_mode']) && isset($view_mode_options['teaser'])) {
      $settings['view_mode'] = 'teaser';
    }

    $element['preview'] = [
      '#type' => 'fieldset',
      '#title' => t('Preview'),
    ];

    $element['preview']['enable'] = [
      '#type' => 'checkbox',
      '#title' => t('Enable preview column'),
      '#default_value' => $settings['enable'],
      '#description' => t('Referenced entities can be displayed in an extra column when editing the form.'),
    ];

    $element['preview']['view_mode'] = [
      '#type' => 'select',
      '#title' => t('View mode'),
      '#description' => t('Select the view mode which should be used for preview.'),
      '#required' => TRUE,
      '#options' => $view_mode_options,
      '#default_value' => $settings['view_mode'],
      '#states' => [
        'visible' => [
          'input[name$="[preview][enable]"]' => ['checked' => TRUE],
        ],
      ],
    ];

    $element['preview']['fallback_view_mode'] = [
      '#type' => 'select',
      '#title' => t('Fallback view mode'),
      '#description' => t('Which view mode should be used when the view mode selected above does not exist.'),
      '#options' => $view_mode_options,
      '#empty_option' => t('- None -'),
      '#default_value' => $settings['fallback_view_mode'],
      '#states' => [
        'visible' => [
          'input[name$="[preview][enable]"]' => ['checked' => TRUE],
        ],
      ],
    ];

    if (!empty($widget_settings['preview']['fallback_view_mode'])) {
      $settings['preview']['fallback_view_mode']['#default_value'] = $widget_settings['preview']['fallback_view_mode'];
    }
  }
  return $element;
}

/**
 * Helper function which returns all selectable view modes of an entity type
 * as form select options array.
 *
 * @param string $entity_type
 *   The specific entity type.
 *
 * @return array
 *   An array containing all view modes.
 */
function inline_entity_form_preview_get_view_mode_options($entity_type) {
  $options = ['default' => t('Default')];
  $view_modes = Drupal::entityManager()->getViewModes($entity_type);

  foreach ($view_modes as $machine_name => $view_mode) {
    $options[$machine_name] = $view_mode['label'];
  }

  return $options;
}

/**
 * Helper function which returns all enabled view modes for a given entity bundle.
 *
 * @todo replace with getDisplayModeOptions()
 *   https://www.drupal.org/node/2322503
 *
 * @return array
 *   An array containing all enabled view modes.
 */
function inline_entity_form_preview_get_enabled_view_modes($entity_type, $bundle) {
  $enabled = ['default'];

  // Loop through all view modes for the given entity type.
  $view_modes = \Drupal::entityManager()->getViewModes($entity_type);
  foreach (array_keys($view_modes) as $view_mode) {
    /** @var $display \Drupal\Core\Entity\EntityViewDisplay **/
    $display = entity_load('entity_view_display', $entity_type . '.' . $bundle . '.' . $view_mode);
    // View mode is enabled when the display can be loaded and the status is true.
    if ($display && $display->status()) {
      $enabled[] = $display->get('mode');
    }
  }
  return $enabled;
}